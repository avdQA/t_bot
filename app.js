import express from 'express';
import _ from 'lodash';
import botConfig from './app.config.js';

import { Telegraf } from 'telegraf';
import { getMainMenu, yesNoKeyboard } from './keyboards.js';

const app = express();
app.set('trust proxy', true);

const bot = new Telegraf(botConfig.TELEGRAM_BOT_TOKEN);

function botStart(ctx) {
  return ctx.reply(botConfig.BOT_TEXT_GREETING, getMainMenu());
}

function checkAdult(ctx) {
  ctx.reply('–í–∞–º —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç?', yesNoKeyboard());
}

function getContent(ctx) {
  let num = _.random(1, 5);
  const {
    update: {
      callback_query: { data },
    },
  } = ctx;
  let catPic;
  if (data === 'kavai') catPic = '‚≠ê';
  if (data === 'family') catPic = 'üéÆ';
  if (data === 'challenge') catPic = 'üî•';
  if (data === 'teen') catPic = 'ü§ô';
  if (data === 'adult') catPic = 'ü§¨';

  return ctx.replyWithPhoto(
    botConfig.GC_BUCKET_PUBLIC + `/images/cat/${data}/${num}.jpg`,
    {
      caption: '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–û–õ–£–ß–ò–¢–¨¬ª',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `${catPic} –ü–æ–ª—É—á–∏—Ç—å`,
              callback_data: data,
            },
          ],
          [
            {
              text: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª',
              callback_data: 'category',
            },
          ],
        ],
      },
    }
  );
}

function getCategory(ctx) {
  return ctx.reply(botConfig.BOT_TEXT_CATEGORY, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–î–µ—Ç—Å–∫–∏–π –∫–∞–≤–∞–π',
            callback_data: 'kavai',
          },
        ],
        [
          {
            text: '–°–µ–º–µ–π–Ω—ã–π –¥–≤–∏–∂',
            callback_data: 'family',
          },
        ],
        [
          {
            text: '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —á–µ–ª–µ–Ω–∂',
            callback_data: 'challenge',
          },
        ],
        [
          {
            text: '–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–π —Ä–æ—Ñ–ª',
            callback_data: 'teen',
          },
        ],
        [
          {
            text: '–ó–∞—à–∫–≤–∞—Ä 18+',
            callback_data: 'checkAdult',
          },
        ],
        [
          {
            text: 'üìù –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä–∏',
            callback_data: 'mainRule',
          },
        ],
      ],
    },
  });
}

function getMainRule(ctx) {
  return ctx.replyWithPhoto(botConfig.GC_BUCKET_PUBLIC + `/images/rule.jpg`, {
    caption: botConfig.BOT_TEXT_RULE,
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
            callback_data: 'mainMenu',
          },
        ],
      ],
    },
  });
}

bot.start((ctx) => {
  botStart(ctx);
});

bot.on('callback_query', (ctx) => {
  const data = ctx.update.callback_query.data;
  if (data === 'mainRule') {
    getMainRule(ctx);
  }

  if (data === 'mainMenu') {
    botStart(ctx);
  }

  if (data === 'category') {
    getCategory(ctx);
  }

  if (data === 'checkAdult') {
    checkAdult(ctx);
  }

  if (data === 'no') {
    ctx
      .reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n–°–µ–π—á–∞—Å –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –≤ –º–µ–Ω—é'
      )
      .then(() => {
        _.delay(function () {
          getCategory(ctx);
        }, 3000);
      });
  }

  if (
    data === 'kavai' ||
    data === 'family' ||
    data === 'challenge' ||
    data === 'teen' ||
    data === 'adult'
  ) {
    getContent(ctx);
  }
});

bot.command('time', (ctx) => {
  ctx.reply(String(new Date()));
});

bot.on('sticker', (ctx) => {
  ctx.reply('–ü—Ä–∏–∫–æ–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä');
});

bot.launch();

app.listen(botConfig.PORT, function (err) {
  if (err) console.log(err);
  console.log('Server listening on PORT ', botConfig.PORT);
});

// With middleware
app.use('/', function (req, res, next) {
  res.send({
    title:
      'Hi there, "‚ô† ‚ô• ‚ô¶ ‚ô£ –¢–∞ —Å–∞–º–∞—è –∏–≥—Ä–∞ –≤ –º–µ–º—ã" is sucssesfuly running ...',
  });
  next();
});

app.get('/', function (req, res) {
  console.log(
    'Hi there, "‚ô† ‚ô• ‚ô¶ ‚ô£ –¢–∞ —Å–∞–º–∞—è –∏–≥—Ä–∞ –≤ –º–µ–º—ã" is sucssesfuly running ...'
  );
});
